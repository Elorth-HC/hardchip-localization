<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddTRACESUpByHoldingLEFTCLICKAndThenMOUSEMOVEUpWhileHoldingCTRLDOWN" xml:space="preserve">
    <value>Aggiungi blocchi di METALLO verso l'alto tenendo premuto il TASTO SINISTRO e poi muovi il MOUSE in alto tenendo premuto CTRL.</value>
  </data>
  <data name="AndTheChannel" xml:space="preserve">
    <value>... e il canale</value>
  </data>
  <data name="Applying0ToThePMOSSGateActivatesItAllowingONLY1GoingThroughIt" xml:space="preserve">
    <value>Applicando 0 alla porta del PMOS lo attiverà, lasciando passare SOLO 1 attraverso.</value>
  </data>
  <data name="Applying1DeactivatesItBlockingALLStateGoingThroughIt" xml:space="preserve">
    <value>Applicando 1 lo disattiverà, bloccando TUTTI gli stati che passano attraverso.</value>
  </data>
  <data name="ApplyingA0DeactivatesItBlockingALLStateGoingThroughIt" xml:space="preserve">
    <value>Applicando 0 lo disattiverà, bloccando TUTTI gli stati che passano attraverso.</value>
  </data>
  <data name="ApplyingA1ToTheNMOSSGateActivatesItAllowingONLY0GoingThroughIt" xml:space="preserve">
    <value>Applicando 1 alla porta del NMOS lo attiverà, lasciando passare SOLO 0 attraverso.</value>
  </data>
  <data name="AreaTooLarge" xml:space="preserve">
    <value>Area troppo grande</value>
  </data>
  <data name="ASHORTCIRCUITWillPreventTheDIEFromProperlyFunctioningInUnexpectedWays" xml:space="preserve">
    <value>Un CORTOCIRCUITO impedirà al CIRCUITO di funzionare correttamente in modi inaspettati.</value>
  </data>
  <data name="ASmallTwistCanBringThatRepresentationWhileStillReusingAllPreviousSolutions" xml:space="preserve">
    <value>Un piccolo aggiustamento può portare quella rappresentazione riutilizzando tutte le soluzioni precedenti.</value>
  </data>
  <data name="AtAnyPointYouCanGetHintsAndHelpFromTheButton" xml:space="preserve">
    <value>In qualsiasi momento puoi ottenere indizi e aiuto dal pulsante '?'.</value>
  </data>
  <data name="BuildASolutionThatMeetsTheCRITERIAThenVALIDATE" xml:space="preserve">
    <value>Costruisci una soluzione che rispetti i CRITERI, poi VERIFICA.</value>
  </data>
  <data name="BUTYouCanTestDifferentINPUTSSeedingStateByClickingOnIt" xml:space="preserve">
    <value>MA puoi provare valori in INPUT diversi cliccando sull'etichetta vicina ad esso.</value>
  </data>
  <data name="ChangeTheINPUTAtLeastOnceThenVALIDATE" xml:space="preserve">
    <value>Cambia l'INPUT almeno una volta, poi VERIFICA.</value>
  </data>
  <data name="COMPACTAndOPTIMIZETheINVERTERThenVALIDATE" xml:space="preserve">
    <value>COMPATTA e OTTIMIZZA l'INVERTITORE, poi VERIFICA.</value>
  </data>
  <data name="Connecting2INPUTSWithTheOPPOSITEStates1And0WillResultInASHORTCIRCUIT" xml:space="preserve">
    <value>Connettendo 2 INPUTS con lo stato OPPOSTO 1 e 0 risulterà in CORTOCIRCUITO.</value>
  </data>
  <data name="ConnectINPUTAndOUTPUTWithoutSHORTCIRCUITThenVALIDATE" xml:space="preserve">
    <value>Connetti INPUT e OUTPUT senza CORTOCIRCUITI, poi VERIFICA.</value>
  </data>
  <data name="ConnectTheINPUTToTheOUTPUTThenVALIDATE" xml:space="preserve">
    <value>Connetti INPUT e OUTPUT, poi VERIFICA</value>
  </data>
  <data name="ConnectTheNMOSProperlyThenVALIDATE" xml:space="preserve">
    <value>Connetti il NMOS correttamente poi VERIFICA</value>
  </data>
  <data name="ConnectThePMOSProperlyThenVALIDATE" xml:space="preserve">
    <value>Connetti il PMOS correttamente poi VERIFICA</value>
  </data>
  <data name="CreateAMERGEDPMOSWith2GATESThenVALIDATE" xml:space="preserve">
    <value>Crea un POMS UNITO con 2 PORTE poi VERIFICA</value>
  </data>
  <data name="DoingSoWillShiftAnyOutputToTheNewEdgeLocation" xml:space="preserve">
    <value>Fare ciò farà spostare qualsiasi output su una nuova posizione sul bordo.</value>
  </data>
  <data name="DoingSoWillSTOPTheValidationProcess" xml:space="preserve">
    <value>Fare ciò FERMERÀ il processo di validazione.</value>
  </data>
  <data name="EachStageSavesYourPassingCircuitAsABLUEPRINTTooForYouToUseYouCanCreateEditYourOwnAsWell" xml:space="preserve">
    <value>Ogni fase salva anche i circuiti che passano come PROGETTI per poterli riutilizzare. 
Puoi anche creare/modificare i tuoi.</value>
  </data>
  <data name="EachStepIsVerifiedInOrderOneAfterTheOtherIfAStepFailsToBeVerifiedTheValidationStops" xml:space="preserve">
    <value>Ogni passo è verificato in ordine, uno dopo l'altro.
Se un passo fallisce la verifica, la validazione si interromperà.</value>
  </data>
  <data name="FixTheSHORTCIRCUITThenVALIDATE" xml:space="preserve">
    <value>Ripara il CORTOCIRCUITO, poi verifica</value>
  </data>
  <data name="FollowingTheCriteriaInputAMustBeConnectedToOutputAButNotToOutputBNorC" xml:space="preserve">
    <value>Seguendo i criteri:
L'input A deve essere connesso all'output A ma né all'output B né al C.</value>
  </data>
  <data name="HereSAMOSFETAndMovingForwardWeLlReferToItAsMOS" xml:space="preserve">
    <value>Questo è un MOSFET, e d'ora in avanti ci riferiremo ad esso come MOS.</value>
  </data>
  <data name="HereSTheNegativeNumberRepresentationCompatibleOutput" xml:space="preserve">
    <value>Questa è la rappresentazione negativa del numero compatibile con l'output.</value>
  </data>
  <data name="IfYouNeedMoreSpaceJustBuildOutsideTheDIEToExtendIt" xml:space="preserve">
    <value>Se hai bisogno di più spazio, costruisci semplicemente fuori dal CIRCUITO per estenderlo.</value>
  </data>
  <data name="IMHereToHelpTrustInTheGuidanceIOfferForMyOnlyAimIsToLeadYouToResolution" xml:space="preserve">
    <value>Sono qui per aiutarti. Fidati delle istruzioni che ti darò, il mio solo scopo è portarti alla risoluzione.</value>
  </data>
  <data name="INFOFULLREPORTUNLOCKED" xml:space="preserve">
    <value>INFO: RAPPORTO COMPLETO SBLOCCATO.</value>
  </data>
  <data name="INPUTBlocksSends1Or0StatesToAdjacentTRACEBlocks" xml:space="preserve">
    <value>Il blocco di INPUT invia lo stato 1 o 0 ai blocchi di METALLO adiacenti.</value>
  </data>
  <data name="INPUTSAreControlledByTheValidationProcessTheMomentYouClickOnVALIDATE" xml:space="preserve">
    <value>Gli INPUT sono controllati dal processo di verifica nel momento in cui premi 'VERIFICA'.</value>
  </data>
  <data name="ItProvidesOptionalStepsToBuildTheChipForEachLevel" xml:space="preserve">
    <value>Fornisce step opzionali per costruire il chip ogni livello.</value>
  </data>
  <data name="ItWouldBeVeryInefficientToRebuildEveryCircuitFromScratch" xml:space="preserve">
    <value>Sarebbe veramente inefficiente ricostruire ogni circuito da capo</value>
  </data>
  <data name="LeftCTRLHoldLeftCLICKDownThenMoveUpToAddTracesVertically" xml:space="preserve">
    <value>CTRL sinistro + tenendo premuto il tasto sinistro, poi muovi verso l'alto per aggiungere METALLO vericalmente.</value>
  </data>
  <data name="MOSCanTakeDifferentShapesNotLimitedToThe3x2x3Blocks" xml:space="preserve">
    <value>I MOS possono assumere diverse forme non limitate a 3x2x3 blocchi.</value>
  </data>
  <data name="MOSHas2MajorPartsTheGate" xml:space="preserve">
    <value>I MOS hanno 2 parti principali: la porta...</value>
  </data>
  <data name="MostOfTheTimeASCHEMATICIsAvailableWithTheChipButtonOnTopHere" xml:space="preserve">
    <value>La maggior parte delle volte uno SCHEMA è disponibile premendo il pulsante del chip qui in alto.</value>
  </data>
  <data name="NMOSNegativeMOSAreTheExactOppositeOfPMOS" xml:space="preserve">
    <value>Gli NOMS (MOS Negativi) sono l'esatto opposto dei PMOS.</value>
  </data>
  <data name="OtherwiseALLBlockWillRevertToItsNaturalNEUTRALState" xml:space="preserve">
    <value>Altrimenti TUTTI i blocchi torneranno al loro naturale stato NEUTRALE.</value>
  </data>
  <data name="RepresentingNegativeNumberSignedNumberCanTBeDoneWithThePreviousSolutionsAsIs" xml:space="preserve">
    <value>Rappresentare i numeri negativi (numeri con segno) non può essere fatto con le soluzioni precedenti così come sono.</value>
  </data>
  <data name="SEPARATETRACEsABAndCThenVALIDATE" xml:space="preserve">
    <value>SEPARA le connessioni A, B e C. Poi VERIFICA.</value>
  </data>
  <data name="SetINDIVIDUALINPUTBITSToMatchTheOUTPUTValueThenMANUALLYVALIDATEStepByStep" xml:space="preserve">
    <value>Imposta i SINGOLI BIT in INPUT in modo da uguagliare il valore di OUTPUT, poi VERIFICA MANUALMENTE passo per passo</value>
  </data>
  <data name="SomeValidationRequiresMultipleStepsEachStepHasItsOwnRequirementAllAreListedOnTopHere" xml:space="preserve">
    <value>La verifica di solito richiede più passi. Ogni passo ha il suo requisito. Sono tutti elencati in alto qui.</value>
  </data>
  <data name="SpecialShapeMOSCanHaveTwoGatesAndShareTheSameChannel" xml:space="preserve">
    <value>La forma speciale dei MOS ha due porte e condivide lo stesso canale.</value>
  </data>
</root>