<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RepresentingNegativeNumberSignedNumberCanTBeDoneWithThePreviousSolutionsAsIs" xml:space="preserve">
    <value>Representing negative number (signed number)
can't be done with the previous solutions as is.</value>
  </data>
  <data name="ASmallTwistCanBringThatRepresentationWhileStillReusingAllPreviousSolutions" xml:space="preserve">
    <value>A small twist can bring that representation
while still reusing all previous solutions.</value>
  </data>
  <data name="ThisIsTheNumberRepresentationUsedSoFar" xml:space="preserve">
    <value>This is the number representation used so far.</value>
  </data>
  <data name="HereSTheNegativeNumberRepresentationCompatibleOutput" xml:space="preserve">
    <value>Here's the negative number representation compatible output.</value>
  </data>
  <data name="SetINDIVIDUALINPUTBITSToMatchTheOUTPUTValueThenMANUALLYVALIDATEStepByStep" xml:space="preserve">
    <value>Set INDIVIDUAL INPUT BITS to match the OUTPUT value,
then MANUALLY VALIDATE step by step</value>
  </data>
  <data name="TRACEsCanBeTrickyToPlaceWithoutTouchingEachOther" xml:space="preserve">
    <value>Sometime, connections can be tricky to place without
touching other ones.</value>
  </data>
  <data name="ConnectINPUTAndOUTPUTWithoutSHORTCIRCUITThenVALIDATE" xml:space="preserve">
    <value>Connect INPUT and OUTPUT without SHORT CIRCUIT, then VALIDATE.</value>
  </data>
  <data name="UseTheCompactingTheInverterBlueprintThenValidate" xml:space="preserve">
    <value>Use the 'Compacting the Inverter' blueprint then validate.</value>
  </data>
  <data name="ItWouldBeVeryInefficientToRebuildEveryCircuitFromScratch" xml:space="preserve">
    <value>It would be very inefficient to
rebuild every circuit from scratch</value>
  </data>
  <data name="ToReuseWhatYouAlreadyBuiltSaveAnyCircuitAsABLUEPRINTAndThenJustSelectItToGetACopyForPlacement" xml:space="preserve">
    <value>To reuse what you already built, save
any circuit as a BLUEPRINT and then
just select it to get a copy for placement.</value>
  </data>
  <data name="EachStageSavesYourPassingCircuitAsABLUEPRINTTooForYouToUseYouCanCreateEditYourOwnAsWell" xml:space="preserve">
    <value>Each stage saves your passing circuit
as a BLUEPRINT too for you to use.
You can create/edit your own as well.</value>
  </data>
  <data name="UseTheBLUEPRINTModeToPlaceAnINVERTEROntoTheDIEThenVALIDATE" xml:space="preserve">
    <value>Use the BLUEPRINT mode to place an INVERTER onto the DIE, then VALIDATE.</value>
  </data>
  <data name="TheDIESizeWasFixedUntilNowNowTheSizeWillBeDynamicToTheRightAndBottomDirection" xml:space="preserve">
    <value>The DIE size was fixed until now; now the size will
be dynamic to the right and bottom direction.</value>
  </data>
  <data name="IfYouNeedMoreSpaceJustBuildOutsideTheDIEToExtendIt" xml:space="preserve">
    <value>If you need more space, just build
outside the DIE to extend it.</value>
  </data>
  <data name="WhenYouValidateAnyEmptyContiguousSpacesWillAutomaticalyBeRemoved" xml:space="preserve">
    <value>When you validate, any empty contiguous
spaces will AUTOMATICALY be removed.</value>
  </data>
  <data name="DoingSoWillShiftAnyOutputToTheNewEdgeLocation" xml:space="preserve">
    <value>Doing so will shift any output to the new edge location.</value>
  </data>
  <data name="TryRemovingAnyBlockInThisColumnAndThenValidateToCompactTheDie" xml:space="preserve">
    <value>Try removing any block in this column
and then validate to compact the die.</value>
  </data>
  <data name="INFOFULLREPORTUNLOCKED" xml:space="preserve">
    <value>INFO: FULL REPORT UNLOCKED.</value>
  </data>
  <data name="COMPACTAndOPTIMIZETheINVERTERThenVALIDATE" xml:space="preserve">
    <value>COMPACT and OPTIMIZE the INVERTER, then VALIDATE.</value>
  </data>
  <data name="TipToDoACuboidSelectHoldLeftCTRLWhileSelectingOrDeleting" xml:space="preserve">
    <value>Tip: To do a cuboid select, hold left CTRL
while selecting or deleting.</value>
  </data>
  <data name="AreaTooLarge" xml:space="preserve">
    <value>Area too large</value>
  </data>
  <data name="SomeValidationRequiresMultipleStepsEachStepHasItsOwnRequirementAllAreListedOnTopHere" xml:space="preserve">
    <value>Validation usually requires multiple
steps. Each step has its own requirement.
All are listed on top here.</value>
  </data>
  <data name="EachStepIsVerifiedInOrderOneAfterTheOtherIfAStepFailsToBeVerifiedTheValidationStops" xml:space="preserve">
    <value>Each step is verified in order, one after
the other. If a step fails to be verified,
the validation stops.</value>
  </data>
  <data name="BuildASolutionThatMeetsTheCRITERIAThenVALIDATE" xml:space="preserve">
    <value>Build a solution that meets the CRITERIA, then VALIDATE.</value>
  </data>
  <data name="IMHereToHelpTrustInTheGuidanceIOfferForMyOnlyAimIsToLeadYouToResolution" xml:space="preserve">
    <value>I'm here to help. Trust in the guidance I offer, for
my only aim is to lead you to resolution.</value>
  </data>
  <data name="ThisOneBlockIsASUBSTRATEBlockSeeItAsTheSupportForEverythingElse" xml:space="preserve">
    <value>This one block is a SUBSTRATE block,
see it as the support for everything else.</value>
  </data>
  <data name="ThisIsTheDIEItIsComposedOfTheEntireSetOfAllBlocks" xml:space="preserve">
    <value>This is the DIE, it is composed of
the entire set of all blocks.</value>
  </data>
  <data name="ThisIsAnINPUTBlockItProvidesSignalToTheDIEToProcessIt" xml:space="preserve">
    <value>This is an INPUT block, it provides
signal to the DIE to process it.</value>
  </data>
  <data name="ThisIsAnOUTPUTBlockItReceivesTheSignalProcessedByTheDIE" xml:space="preserve">
    <value>This is an OUTPUT block, it receives
the signal processed by the DIE.</value>
  </data>
  <data name="ThisDIENeedsToFullfillASimpleTaskOutputingWhatItReceivesOnTheInput" xml:space="preserve">
    <value>This DIE needs to fullfill a simple
task: outputing what it receives
on the input.</value>
  </data>
  <data name="ToConnectTheINPUTAndTheOUTPUTUseATRACEBlockAndThenClickOnAnySUBSTRATEBlockToPlaceATRACE" xml:space="preserve">
    <value>To connect the INPUT and the OUTPUT use
a METAL block, and then click on any
SUBSTRATE block to place it.</value>
  </data>
  <data name="WhenYouHaveCompletedYourDIELaunchTheVerificationWithTheVALIDATEButton" xml:space="preserve">
    <value>When you have completed your DIE, launch
the verification with the 'VALIDATE' button.</value>
  </data>
  <data name="AtAnyPointYouCanGetHintsAndHelpFromTheButton" xml:space="preserve">
    <value>At any point you can get hints and
help from the '?' button.</value>
  </data>
  <data name="ConnectTheINPUTToTheOUTPUTThenVALIDATE" xml:space="preserve">
    <value>Connect the INPUT to the OUTPUT, then VALIDATE</value>
  </data>
  <data name="TestWithTheClickMeInputAtLeastOnceThenValidate" xml:space="preserve">
    <value>Test the 'Click Me!' input at least once then VALIDATE.</value>
  </data>
  <data name="TRACEINPUTAndOUTPUTBlocksCanHave3States1InRed0InBlue_KnownAsNEUTRALInGray" xml:space="preserve">
    <value>METAL and INPUT blocks can each be in one of three states:
1 (red) - connected to positive / VDD
0 (blue) - connected to ground / VSS
_ (gray) - disconnected / floating / Hi-Z</value>
  </data>
  <data name="INPUTBlocksSends1Or0StatesToAdjacentTRACEBlocks" xml:space="preserve">
    <value>INPUT blocks can actively drive a signal, sending
either a 1 or 0 into adjacent METAL blocks.</value>
  </data>
  <data name="OtherwiseALLBlockWillRevertToItsNaturalNEUTRALState" xml:space="preserve">
    <value>All other blocks simply propagate these signals along
connected traces. If no INPUT continues to drive them,
the signals eventually dissipate and the entire connected
network of METAL returns to the floating state.</value>
  </data>
  <data name="INPUTSAreControlledByTheValidationProcessTheMomentYouClickOnVALIDATE" xml:space="preserve">
    <value>INPUTS are controlled by the validation
process the moment you click on 'VALIDATE'.</value>
  </data>
  <data name="BUTYouCanTestDifferentINPUTSSeedingStateByClickingOnIt" xml:space="preserve">
    <value>BUT you can test different INPUT's value
by clicking on the label next to it.</value>
  </data>
  <data name="DoingSoWillSTOPTheValidationProcess" xml:space="preserve">
    <value>Doing so will STOP the validation process.</value>
  </data>
  <data name="ChangeTheINPUTAtLeastOnceThenVALIDATE" xml:space="preserve">
    <value>Change the INPUT at least once, then VALIDATE.</value>
  </data>
  <data name="MOSCanTakeDifferentShapesNotLimitedToThe3x2x3Blocks" xml:space="preserve">
    <value>MOS can take different shapes
not limited to the 3x2x3 blocks.</value>
  </data>
  <data name="SpecialShapeMOSCanHaveTwoGatesAndShareTheSameChannel" xml:space="preserve">
    <value>Special shape MOS can have two gates
and share the same channel.</value>
  </data>
  <data name="YouCantUseTraceHereOnlyPMOSFromTheBottomBuildMenu" xml:space="preserve">
    <value>You cant use METAL block here, only PMOS
from the bottom build menu.</value>
  </data>
  <data name="CreateAMERGEDPMOSWith2GATESThenVALIDATE" xml:space="preserve">
    <value>Create a MERGED PMOS with 2 GATES then VALIDATE</value>
  </data>
  <data name="NMOSNegativeMOSAreTheExactOppositeOfPMOS" xml:space="preserve">
    <value>NMOS (Negative MOS) are the exact opposite of PMOS.</value>
  </data>
  <data name="TheBlueStripsHelpToDifferentiateTheNMOSFromAPMOSWhichAreRed" xml:space="preserve">
    <value>The blue strips help to differentiate
the NMOS from a PMOS (which are red).</value>
  </data>
  <data name="ApplyingA1ToTheNMOSSGateActivatesItAllowingONLY0GoingThroughIt" xml:space="preserve">
    <value>Applying a 1 to the NMOS's gate activates
it, allowing ONLY 0 going through it.</value>
  </data>
  <data name="ApplyingA0DeactivatesItBlockingALLStateGoingThroughIt" xml:space="preserve">
    <value>Applying a 0 deactivates it, blocking
ALL state going through it.</value>
  </data>
  <data name="ConnectTheNMOSProperlyThenVALIDATE" xml:space="preserve">
    <value>Connect the NMOS properly then VALIDATE</value>
  </data>
  <data name="TRACESCanOnlyTransferOneStateAtATimeButMOSFETMetalOxideSemiconductorsFieldEffectTransistorCanReactToStates" xml:space="preserve">
    <value>A simple METAL connection can only transfer one state at a time.
But MOSFET (Metal Oxide Semiconductors Field-effect Transistor)
can react to states!</value>
  </data>
  <data name="HereSAMOSFETAndMovingForwardWeLlReferToItAsMOS" xml:space="preserve">
    <value>Here's a MOSFET, and moving forward
we'll refer to it as MOS.</value>
  </data>
  <data name="MOSHas2MajorPartsTheGate" xml:space="preserve">
    <value>MOS has 2 major parts: the gate...</value>
  </data>
  <data name="AndTheChannel" xml:space="preserve">
    <value>... and the channel</value>
  </data>
  <data name="ThisOneMOSIsAPMOSPositiveMOSItActsLikeASwitchThatCanBeEitherActivatedOrDeactivatedByAnyGivenState" xml:space="preserve">
    <value>This one MOS is a PMOS (Positive-MOS). It acts like
a switch that can be either 'activated' or 'deactivated'
by any given state.</value>
  </data>
  <data name="Applying0ToThePMOSSGateActivatesItAllowingONLY1GoingThroughIt" xml:space="preserve">
    <value>Applying 0 to the PMOS's gate activates it,
allowing ONLY 1 going through it.</value>
  </data>
  <data name="Applying1DeactivatesItBlockingALLStateGoingThroughIt" xml:space="preserve">
    <value>Applying 1 deactivates it, blocking
ALL state going through it.</value>
  </data>
  <data name="UseTheHELPButtonOnTopHereOrTryWiringThePMOSByYourself" xml:space="preserve">
    <value>Use the HELP button on top here or try wiring the PMOS by yourself</value>
  </data>
  <data name="ConnectThePMOSProperlyThenVALIDATE" xml:space="preserve">
    <value>Connect the PMOS properly then VALIDATE</value>
  </data>
  <data name="MostOfTheTimeASCHEMATICIsAvailableWithTheChipButtonOnTopHere" xml:space="preserve">
    <value>Most of the time a SCHEMATIC is available with the Chip button on top here.</value>
  </data>
  <data name="ItProvidesOptionalStepsToBuildTheChipForEachLevel" xml:space="preserve">
    <value>It provides optional steps to build the chip for each level.</value>
  </data>
  <data name="UseTheSCHEMATICOrNotToBuildAnINVERTERThenVALIDATE" xml:space="preserve">
    <value>Use the SCHEMATIC (or not) to build an INVERTER, then VALIDATE</value>
  </data>
  <data name="YouCanUseRToRotatePMOSNMOSOrAnySelectionOfBlocks" xml:space="preserve">
    <value>You can use R to rotate PMOS/NMOS
or any selection of blocks.</value>
  </data>
  <data name="Connecting2INPUTSWithTheOPPOSITEStates1And0WillResultInASHORTCIRCUIT" xml:space="preserve">
    <value>Connecting 2 INPUTS with the OPPOSITE states 1 and 0
will result in a SHORT CIRCUIT.</value>
  </data>
  <data name="ASHORTCIRCUITWillPreventTheDIEFromProperlyFunctioningInUnexpectedWays" xml:space="preserve">
    <value>A SHORT CIRCUIT will prevent the DIE from properly
functioning in unexpected ways.</value>
  </data>
  <data name="ToIsolateThe2INPUTSFromEachOtherHoldALTDownAndClickOnATRACEToRemoveIt" xml:space="preserve">
    <value>To isolate the 2 INPUTS from each other, hold 'ALT'
down and click on a METAL block to remove it.</value>
  </data>
  <data name="FixTheSHORTCIRCUITThenVALIDATE" xml:space="preserve">
    <value>Fix the SHORT CIRCUIT, then VALIDATE</value>
  </data>
  <data name="ToIsolateTRACEsFromEachOtherTheyMustHaveAtLeast1EmptySpaceBetweenThemInAnyDirectionOtherwiseTheyAreConnected" xml:space="preserve">
    <value>To isolate METAL pathways from each other, they must
have at least 1 empty space between them in any direction.
Otherwise they are connected.</value>
  </data>
  <data name="FollowingTheCriteriaInputAMustBeConnectedToOutputAButNotToOutputBNorC" xml:space="preserve">
    <value>Following the criteria:
Input A must be connected to Output A
but not to Output B nor C.</value>
  </data>
  <data name="AddTRACESUpByHoldingLEFTCLICKAndThenMOUSEMOVEUpWhileHoldingCTRLDOWN" xml:space="preserve">
    <value>Add METAL block up by holding LEFT CLICK and then
MOUSE MOVE up while holding CTRL DOWN.</value>
  </data>
  <data name="SEPARATETRACEsABAndCThenVALIDATE" xml:space="preserve">
    <value>SEPARATE A, B and C connections. Then VALIDATE.</value>
  </data>
  <data name="LeftCTRLHoldLeftCLICKDownThenMoveUpToAddTracesVertically" xml:space="preserve">
    <value>Left CTRL + hold Left CLICK down,
then move up to add METAL vertically.</value>
  </data>
  <data name="MetalTracesStartInTheGrayFloatingStateNNoEnergyFlows" xml:space="preserve">
    <value>Metal traces start in the gray floating state. No
energy flows to/from a power source. They are
basically disconnected pieces of wire.</value>
  </data>
</root>