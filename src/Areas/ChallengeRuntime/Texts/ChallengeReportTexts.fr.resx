<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <!-- Translation to French below -->
  <data name="PerformanceReport" xml:space="preserve">
    <value>{0}  rapport de performance</value>
    <comment>Composé avec le nom du défi au début</comment>
  </data>
  <data name="LastChipChecked" xml:space="preserve">
    <value>Puce vérifiée</value>
  </data>
  <data name="ChipChecked" xml:space="preserve">
    <value>Puce vérifiée!</value>
  </data>
  <data name="FunctionalSatisfactoryStreamlined" xml:space="preserve">
    <value>Fonctionnel -&gt; Satisfaisant -&gt; Optimisé</value>
  </data>
  <data name="Blocks" xml:space="preserve">
    <value>   Blocs:</value>
    <comment>Space important</comment>
  </data>
  <data name="Volume" xml:space="preserve">
    <value>   Volume:</value>
    <comment>Space important</comment>
  </data>
  <data name="BlocksUsedTheFewerTheBetterNComplexSatisfactoryEfficient" xml:space="preserve">
    <value>Blocs utilisés. Moins il y en a, mieux c'est.
Complex -&gt; Satisfaisant -&gt; Efficace</value>
  </data>
  <data name="VolumeUsedTheSmallerTheBetterNLargeSatisfactoryCompact" xml:space="preserve">
    <value>Volume utilisé. Plus il est petit, mieux c'est.
Large -&gt; Satisfaisant -&gt; Compact</value>
  </data>
  <data name="Ticks" xml:space="preserve">
    <value>   Ticks:</value>
  </data>
  <data name="MOS" xml:space="preserve">
    <value>   MOS:</value>
    <comment>Space important</comment>
  </data>
  <data name="TicksUsedTheFewerTheBetterNSlowSatisfactoryFast" xml:space="preserve">
    <value>Ticks utilisés. Moins il y en a, mieux c'est.
Lent -&gt; Satisfaisant -&gt; Rapide</value>
  </data>
  <data name="MOSUsedTheFewerTheBetterNHighSatisfactoryReduced" xml:space="preserve">
    <value>MOS utilisés. Moins il y en a, mieux c'est.
Élevé -&gt; Satisfaisant -&gt; Réduit</value>
  </data>
  <data name="DataUnavailable" xml:space="preserve">
    <value>Données indisponibles</value>
  </data>
  <data name="VolumeReport" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="TicksReport" xml:space="preserve">
    <value>Ticks</value>
  </data>
  <data name="MOSReport" xml:space="preserve">
    <value>MOS</value>
  </data>
  <data name="PhotoMode" xml:space="preserve">
    <value>Mode photo</value>
  </data>
  <data name="ExportBlueprintToANewHCDriveFileIntoTheClipboard" xml:space="preserve">
    <value>Exporter le blueprint vers un nouveau fichier HCDrive dans le presse-papiers</value>
  </data>
  <data name="BestBlockSolutionClickToCompare" xml:space="preserve">
    <value>Meilleure solution de blocs, cliquez pour comparer. Clic droit pour définir à actuelle.</value>
  </data>
  <data name="BestBlockSolution" xml:space="preserve">
    <value> (meilleure solution de blocs)</value>
  </data>
  <data name="BestVolumeSolutionClickToCompare" xml:space="preserve">
    <value>Meilleure solution de volume, cliquez pour comparer. Clic droit pour définir à actuelle.</value>
  </data>
  <data name="BestVolumeSolution" xml:space="preserve">
    <value> (meilleure solution de volume)</value>
  </data>
  <data name="BestTickSolutionClickToCompare" xml:space="preserve">
    <value>Meilleure solution de ticks, cliquez pour comparer. Clic droit pour définir à actuelle.</value>
  </data>
  <data name="BestTickSolution" xml:space="preserve">
    <value> (meilleure solution de ticks)</value>
  </data>
  <data name="BestMosSolutionClickToCompare" xml:space="preserve">
    <value>Meilleure solution de MOS, cliquez pour comparer. Clic droit pour définir à actuelle.</value>
  </data>
  <data name="BestMosSolution" xml:space="preserve">
    <value> (meilleure solution de MOS)</value>
  </data>
  <data name="Modify" xml:space="preserve">
    <value>Modifier</value>
  </data>
  <data name="SaveBlueprint" xml:space="preserve">
    <value>Enregistrer le blueprint</value>
  </data>
  <data name="Grade01" xml:space="preserve">
    <value>Note{0}:</value>
  </data>
  <data name="Functional" xml:space="preserve">
    <value>Fonctionnel</value>
  </data>
  <data name="Satisfactory" xml:space="preserve">
    <value>Satisfaisant</value>
  </data>
  <data name="Streamlined" xml:space="preserve">
    <value>Optimisé</value>
  </data>
  <data name="Advanced" xml:space="preserve">
    <value>Avancé</value>
  </data>
  <data name="Masterpiece" xml:space="preserve">
    <value>Chef-d'œuvre</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>Aucun</value>
  </data>
  <data name="Complex" xml:space="preserve">
    <value>Complexe</value>
  </data>
  <data name="Efficient" xml:space="preserve">
    <value>Efficace</value>
  </data>
  <data name="EfficientP" xml:space="preserve">
    <value>Efficace+</value>
  </data>
  <data name="EfficientPP" xml:space="preserve">
    <value>Efficace++</value>
  </data>
  <data name="Large" xml:space="preserve">
    <value>Large</value>
  </data>
  <data name="Compact" xml:space="preserve">
    <value>Compact</value>
  </data>
  <data name="CompactP" xml:space="preserve">
    <value>Compact+</value>
  </data>
  <data name="CompactPP" xml:space="preserve">
    <value>Compact++</value>
  </data>
  <data name="Slow" xml:space="preserve">
    <value>Lent</value>
  </data>
  <data name="Fast" xml:space="preserve">
    <value>Rapide</value>
  </data>
  <data name="FastP" xml:space="preserve">
    <value>Rapide+</value>
  </data>
  <data name="FastPP" xml:space="preserve">
    <value>Rapide++</value>
  </data>
  <data name="High" xml:space="preserve">
    <value>Élevé</value>
  </data>
  <data name="Reduced" xml:space="preserve">
    <value>Réduit</value>
  </data>
  <data name="ReducedP" xml:space="preserve">
    <value>Réduit+</value>
  </data>
  <data name="ReducedPP" xml:space="preserve">
    <value>Réduit++</value>
  </data>
  <data name="CompletedSuccessfully" xml:space="preserve">
    <value> complété.</value>
  </data>
  <data name="SolutionOutOfDateRunAgainValidationToUpdate" xml:space="preserve">
    <value>Solution obsolète, relancez la validation pour mettre à jour.</value>
  </data>
</root>